name: Padel Watcher

on:
  schedule:
    - cron: "*/1 * * * *"
    - cron: "0 0 1 * *"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  watch:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: padel-watcher
      cancel-in-progress: true

    # Use image with browsers & OS deps preinstalled
    container:
      image: mcr.microsoft.com/playwright/python:v1.47.0-jammy
      # (container already sets PLAYWRIGHT_BROWSERS_PATH=/ms-playwright)

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure padel-state branch exists
        working-directory: ${{ github.workspace }}
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch origin --quiet || true
          if git ls-remote --exit-code --heads origin padel-state; then
            echo "padel-state exists on remote."
          else
            echo "Initialising padel-state branchâ€¦"
            git checkout --orphan padel-state
            git reset --hard
            mkdir -p state
            echo "Padel state branch" > .padel-state-readme
            git config user.name "padel-bot"
            git config user.email "padel-bot@users.noreply.github.com"
            git add .
            git commit -m "init padel-state"
            git push origin padel-state
            git checkout -
          fi

      - uses: actions/checkout@v4
        with:
          ref: padel-state
          path: .state_branch
          fetch-depth: 0
          persist-credentials: true
          clean: false

      - name: Restore state files
        run: |
          mkdir -p state
          if [ -d .state_branch/state ]; then
            cp -f .state_branch/state/* state/ 2>/dev/null || true
          fi
          ls -la state || true

      # >>> Install Python deps (no apt, no --with-deps) <<<
      - name: Install Python deps
        run: |
          python --version
          pip install --upgrade pip
          pip install "playwright==1.47.0" requests
          # sanity check
          python -c "import playwright, sys; print('playwright', playwright.__version__); print(sys.executable)"

      - name: Run checker
        env:
          TG_TOKEN:   ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          BOT_USERNAME: "padelsniper_bot"
          SCAN_DAYS: "45"
          START_HOUR_Z: "5"
          EARLIEST_HOUR: "0"
          LATEST_HOUR: "24"
          WEEKENDS_OK: "true"
          WEEKDAYS_OK: "true"
          ACTIVITY_ID: "149A001015"
          NOTIFY_LIMIT_PER_SLOT: "2"
          MAX_SLOTS_PER_DATE_SHOWN: "8"
        run: python checker_pw.py

      - name: Upload debug screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-screens
          path: debug/*.png
          if-no-files-found: ignore

      - name: Persist state to branch
        if: always()
        working-directory: ${{ github.workspace }}/.state_branch
        run: |
          git config --global --add safe.directory "$PWD"
          mkdir -p state
          cp -f "${GITHUB_WORKSPACE}/state/"* state/ 2>/dev/null || true
          git config user.name "padel-bot"
          git config user.email "padel-bot@users.noreply.github.com"
          git add state/* || true
          git commit -m "update state [skip ci]" || true
          git push origin HEAD:padel-state || true

  keepalive:
    if: github.event_name == 'schedule' && github.event.schedule == '0 0 1 * *'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Touch keepalive file and push
        run: |
          date +%F > .keepalive
          git config user.name "padel-bot"
          git config user.email "padel-bot@users.noreply.github.com"
          git add .keepalive || true
          git commit -m "keepalive [skip ci]" || true
          git push || true